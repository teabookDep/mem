查看已经配置分支关联信息
git branch -vv
cat .git/config

查看远程库详细信息
git remote -v
git remote show origin

添加远程库
git remote add origin https://github.com/teabookDep/pyexcel.git
git push -u origin master
(第一次推送因为远程仓库为空 要加 -u)
查看远程分支
git branch -r


git checkout –b branch4 origin/branch2


把当前分支中未提交的修改移动到其他分支
git stash
git checkout branch2
git stash pop 

git log --after="2014-7-1" --before="2014-7-4"
git log –since=2.weeks

git log --after="yesterday"
git blame file_name

git log --since=10.hour

git log --graph --all --format="%x09%an%x09%h %d %s"

当前目录所有修改的文件 从HEAD中签出并且把它恢复成未修改时的样子.
git checkout .

把hello.rb从HEAD中签出.
git checkout -- hello.rb

git config --global user.name "teabook"
git config --global user.eamil "teabook@gmail.com"

git clone https://github.com/teabookDep/docker-spark.git

添加远程仓库
git remote add origin git@xx.xx.xx.xx:repos/xxx/xxx/xxx.git


 create a new repository on the command line
echo "# pyexcel" >> README.md
git init
git add README.md
git commit -m "first commit"


Git撤销git commit 但是未git push的修改


git如何清除工作区所有还没有add的文件的修改
git checkout -- filename
git checkout .


先更新下本地的远程分支
git fetch origin
然后可以比对
git diff 本地分支 origin/xxxx
git diff HEAD FETCH_HEAD


在使用git时，push到远端后发现commit了多余的文件，或者希望能够回退到以前的版本。
先在本地回退到相应的版本：
git reset --hard <版本号>
// 注意使用 --hard 参数会抛弃当前工作区的修改
// 使用 --soft 参数的话会回退到之前的版本，但是保留当前工作区的修改，可以重新提交

如果此时使用命令：
git push origin <分支名>
会提示本地的版本落后于远端的版本； 
为了覆盖掉远端的版本信息，使远端的仓库也回退到相应的版本，需要加上参数--force
git push origin <分支名> --force

git remote add dkremote https://github.com/teabookDep/docker-spark.git

https://github.com/teabookDep/docker-spark.git


git reset --mixed HEAD 将你当前的改动从缓存区中移除，但是这些改动还留在工作目录中。
另一方面，如果你想完全舍弃你没有提交的改动，你可以使用 
git reset --hard HEAD。这是 git reset 最常用的两种用法。

git reset --hard HEAD~1

git clone https://github.com/apache/spark.git


查看全部log 
git reflog

通常合并分支时，git一般使用”Fast
forward”模式，在这种模式下，删除分支后，会丢掉分支信息，现在我们来使用带参数
–no-ff来禁用”Fast forward”模式
git merge –no-ff -m “注释” dev


使用命令 git stash list来查看stash 的工作区
git stash pop,恢复stash内容

基于当前分支创建新分支
git branch 新分支

基于指定分支创建新分支
git branch 新分支 指定分支

基于某个 commit 创建分支
git branch 新分支 某个 commit 的 id

删除已合并到 master 分支的所有本地分支
git branch --merged master | grep -v '^\*\| master' | xargs -n 1 git branch -d 

删除远端 origin 已不存在的所有本地分支
git remote prune orign

某文件各行最后修改对应的 commit 以及作者
git blame 文件

新建带备注标签
git tag -a v1.0 -m '前端食堂'


删除远程分支
git push origin --delete <branchName>
查看远程分支
git branch -r
git ls-remote

删除远程tag
git push origin --delete tag <tagname>

重命名本地分支
git branch -m devel develop

看到分支的合并情况
git log --graph --pretty=oneline --abbrev-commit

查看已合并分支
git branch --merged

查看未合并分支
git branch --no-merged

获取已更改文件的列表
git diff-tree --no-commit-id --name-only -r f9c4c4e0
获取提交中所有文件的列表
git ls-tree --name-only -r f9c4c4e0
git show --stat --oneline f9c4c4e0
git show --name-only --oneline  f9c4c4e0

指定两个提交之间的更改文件列表（A/D/M）
git diff --name-status <SHA1> <SHA1>^
git diff --name-status f9c4c4e0 f9c4c4e0^

git show --name-status --oneline f9c4c4e0

#当你想要知道 Hello, World! 字符串是什么时候加到项目中哪个文件中去的
git log -S "Hello, World!"
-S"<string>"、-G"<string>"
正则表达式去匹配而不是字符串, 那么你可以使用-G代替-S.

#查询commit1与commit2之间的记录，包括commit1和commit2
git log commit1 commit2


